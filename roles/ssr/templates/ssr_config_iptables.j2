#!/bin/sh

iptables_bak={{ SSR_IPTABLES_BACKUP_FILE }}
ipset_protocal_version=$(ipset -v |grep -o 'version.*[0-9]' |head -n1 |cut -d' ' -f2)

if [ "$1" == 'restore' ]; then
    echo 'remove iptables...'

    ip route flush table 100

    {% for suffix in ['TCP'] %}
    iptables -t nat -F {{ SSR_IPTABLES_RULE_PREFIX }}{{ suffix }}          # flush
    iptables -t nat -X {{ SSR_IPTABLES_RULE_PREFIX }}{{ suffix }}         # --delete-chain
    {% endfor %}

    # delete related rules
    iptables -t nat -D PREROUTING -p tcp -j {{ SSR_IPTABLES_RULE_PREFIX }}TCP
    iptables -t nat -D OUTPUT -p tcp -j {{ SSR_IPTABLES_RULE_PREFIX }}TCP


    if [ "$ipset_protocal_version" == 6 ]; then
        alias iptables='/usr/sbin/iptables'
        ipset destroy {{ SSR_IPSET_NAME }}
        ipset destroy {{ SSR_IPSET_NAME }}S
    else
        alias iptables='/opt/sbin/iptables'
        ipset -X {{ SSR_IPSET_NAME }}
        ipset -X {{ SSR_IPSET_NAME }}S
    fi

    exit 0
fi

echo "install iptables..."
if iptables -t nat -L {{ SSR_IPTABLES_RULE_PREFIX }}TCP; then
    echo "already installed"
    exit 0
fi

remote_server_ip=$(cat {{ SSR_CFG_FILE }} |grep 'server"' |cut -d':' -f2|cut -d'"' -f2)
local_redir_ip=$(cat {{ SSR_CFG_FILE }} |grep 'local_address"' |cut -d':' -f2|cut -d'"' -f2)
local_redir_port=$(cat {{ SSR_CFG_FILE }} |grep 'local_port' |cut -d':' -f2 |grep -o '[0-9]*')

echo 'Applying ipset rule, it maybe take several minute to finish ...'

ipset_protocal_version=$(ipset -v |grep -o 'version.*[0-9]' |head -n1 |cut -d' ' -f2)

if [ "$ipset_protocal_version" == 6 ]; then
    alias iptables='/usr/sbin/iptables'
    alias iptables_save='/usr/sbin/iptables-save'
    modprobe ip_set
    modprobe ip_set_hash_net
    modprobe ip_set_hash_ip
    modprobe xt_set
    ipset -N {{ SSR_IPSET_NAME }} hash:ip
    ipset -N {{ SSR_IPSET_NAME }}S hash:net
    alias ipset_add_chinaip='ipset add {{ SSR_IPSET_NAME }}'
    alias ipset_add_chinaips='ipset add {{ SSR_IPSET_NAME }}S'
else
    alias iptables='/opt/sbin/iptables'
    alias iptables_save='/opt/sbin/iptables-save'
    modprobe ip_set
    modprobe ip_set_nethash
    modprobe ip_set_iphash
    modprobe ipt_set
    # v4 document: https://people.netfilter.org/kadlec/ipset/ipset.man.html
    ipset -N {{ SSR_IPSET_NAME }} iphash
    ipset -N {{ SSR_IPSET_NAME }}S nethash
    alias ipset_add_chinaip='ipset -q -A {{ SSR_IPSET_NAME }}'
    alias ipset_add_chinaips='ipset -q -A {{ SSR_IPSET_NAME }}S'
fi

OLDIFS="$IFS" && IFS=$'\n'
if ipset -L {{ SSR_IPSET_NAME }}S &>/dev/null; then
    count=$(ipset -L {{ SSR_IPSET_NAME }}S |wc -l)

    if [ "$count" -lt "8000" ]; then
        for ip in $(cat {{ COMMON_CFG_DIR }}/chinadns_chnroute.txt |grep -v '^#'); do
            ipset_add_chinaips $ip
        done

        for ip in $(cat {{ SSR_BYPASS_IP_FILE }}|grep -v '^#'); do
            ipset_add_chinaips $ip
        done
    fi
fi

if ipset -L {{ SSR_IPSET_NAME }}; then
    {% for ip in SSR_BYPASS_IP %}
    ipset_add_chinaip {{ ip }}
    {% endfor %}
    ipset_add_chinaip $remote_server_ip

fi
IFS=$OLDIFS

# ====================== tcp rule =======================
iptables -t nat -N {{ SSR_IPTABLES_RULE_PREFIX }}TCP
iptables -t nat -A {{ SSR_IPTABLES_RULE_PREFIX }}TCP -p tcp -m set --match-set {{ SSR_IPSET_NAME }} dst -j RETURN
iptables -t nat -A {{ SSR_IPTABLES_RULE_PREFIX }}TCP -p tcp -m set --match-set {{ SSR_IPSET_NAME }}S dst -j RETURN
iptables -t nat -A {{ SSR_IPTABLES_RULE_PREFIX }}TCP -p tcp -j REDIRECT --to-ports $local_redir_port

# Apply tcp rule
iptables -t nat -A PREROUTING -p tcp -j {{ SSR_IPTABLES_RULE_PREFIX }}TCP
# use ssr inside router, easy debug
iptables -t nat -A OUTPUT -p tcp -j {{ SSR_IPTABLES_RULE_PREFIX }}TCP
